L.PolylineOffset={translatePoint:function(t,n,i){return L.point(t.x+n*Math.cos(i),t.y+n*Math.sin(i))},offsetPointLine:function(t,n){var i=t.length;if(i<2)throw new Error("Line should be defined by at least 2 points");for(var e,o,s,r=t[0],f=[],a=1;a<i;a++)e=t[a],o=(s=Math.atan2(r.y-e.y,r.x-e.x))-Math.PI/2,f.push({angle:s,offsetAngle:o,distance:n,original:[r,e],offset:[this.translatePoint(r,n,o),this.translatePoint(e,n,o)]}),r=e;return f},latLngsToPoints:function(t,n){for(var i=[],e=0,o=t.length;e<o;e++)i[e]=n.project(t[e]);return i},pointsToLatLngs:function(t,n){for(var i=[],e=0,o=t.length;e<o;e++)i[e]=n.unproject(t[e]);return i},offsetLatLngs:function(t,n,i){var e=this.offsetLatLngsToPoints(t,n,i);return this.pointsToLatLngs(e,i)},offsetLatLngsToPoints:function(t,n,i){var e=this.latLngsToPoints(t,i);return this.offsetPoints(e,n)},offsetPoints:function(t,n){var i=this.offsetPointLine(t,n);return this.joinLineSegments(i,n,"round")},intersection:function(t,n,i,e){var o=this.lineEquation(t,n),s=this.lineEquation(i,e);if(null==o||null==s)return null;if(o.hasOwnProperty("x"))return s.hasOwnProperty("x")?null:L.point(o.x,s.a*o.x+s.b);if(s.hasOwnProperty("x"))return L.point(s.x,o.a*s.x+o.b);if(o.a==s.a)return null;var r=(s.b-o.b)/(o.a-s.a),f=o.a*r+o.b;return L.point(r,f)},lineEquation:function(t,n){if(t.x==n.x)return t.y!=n.y?{x:t.x}:null;var i=(n.y-t.y)/(n.x-t.x);return{a:i,b:t.y-i*t.x}},joinSegments:function(t,n,i,e){var o=[];switch(e){case"round":o=this.circularArc(t,n,i);break;case"cut":o=[this.intersection(t.offset[0],t.offset[1],n.original[0],n.original[1]),this.intersection(t.original[0],t.original[1],n.offset[0],n.offset[1])];break;case"straight":o=[t.offset[1],n.offset[0]];break;case"intersection":default:o=[this.intersection(t.offset[0],t.offset[1],n.offset[0],n.offset[1])]}return o.filter(function(t){return t})},joinLineSegments:function(t,n,i){var e=t.length,o=[],s=t[0],r=t[0];o.push(s.offset[0]);for(var f=1;f<e;f++)r=t[f],o=o.concat(this.joinSegments(s,r,n,i)),s=r;return o.push(r.offset[1]),o},circularArc:function(t,n,i){if(t.angle==n.angle)return[t.offset[1]];var e=t.original[1],o=[];if(i<0)var s=t.offsetAngle,r=n.offsetAngle;else s=n.offsetAngle,r=t.offsetAngle;if(r<s&&(r+=2*Math.PI),r>s+Math.PI)return[this.intersection(t.offset[0],t.offset[1],n.offset[0],n.offset[1])];for(var f=Math.abs(8/i),a=s;a<r;a+=f)o.push(this.translatePoint(e,i,a));return o.push(this.translatePoint(e,i,r)),0<i&&o.reverse(),o}},"0"==L.version.charAt(0)&&parseInt(L.version.charAt(2))<8?L.Polyline.include({projectLatlngs:function(){this._originalPoints=[];for(var t=0,n=this._latlngs.length;t<n;t++)this._originalPoints[t]=this._map.latLngToLayerPoint(this._latlngs[t]);this.options.offset&&(this._originalPoints=L.PolylineOffset.offsetPoints(this._originalPoints,this.options.offset))}}):L.Polyline.include({_projectLatlngs:function(t,n,i){var e,o,s=t[0]instanceof L.LatLng,r=t.length;if(s){for(o=[],e=0;e<r;e++)o[e]=this._map.latLngToLayerPoint(t[e]),void 0!==i&&i.extend(o[e]);this.options.offset&&(o=L.PolylineOffset.offsetPoints(o,this.options.offset)),n.push(o)}else for(e=0;e<r;e++)void 0!==i?this._projectLatlngs(t[e],n,i):this._projectLatlngs(t[e],n)}}),L.Polyline.include({setOffset:function(t){return this.options.offset=t,this.redraw(),this}});